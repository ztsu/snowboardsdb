// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package client

import (
	"fmt"
	"io"
	"strconv"
)

type BrandResolveResult interface {
	IsBrandResolveResult()
}

type Catalogue interface {
	IsCatalogue()
}

type SnowboardImage interface {
	IsSnowboardImage()
}

type Brand struct {
	ID          int64            `json:"id"`
	Name        string           `json:"name"`
	WebsiteURL  string           `json:"websiteUrl"`
	FoundedIn   *int64           `json:"foundedIn"`
	Founders    []*Person        `json:"founders"`
	OriginsFrom *string          `json:"originsFrom"`
	Catalogues  *BrandCatalogues `json:"catalogues"`
}

type BrandCatalogues struct {
	Brand *Brand         `json:"brand"`
	List  *CatalogueList `json:"list"`
	Total int64          `json:"total"`
}

type BrandCataloguesListFilter struct {
	Season []Season `json:"season"`
}

type BrandList struct {
	Items []*Brand `json:"items"`
}

type BrandListFilter struct {
	ID             []int64 `json:"id"`
	NameStartsWith *string `json:"nameStartsWith"`
}

type BrandNotFoundError struct {
	Message string `json:"message"`
}

type BrandResolveError struct {
	Message string `json:"message"`
}

type Brands struct {
	List  *BrandList `json:"list"`
	Total int64      `json:"total"`
}

type CatalogueList struct {
	Items []Catalogue `json:"items"`
}

type CatalogueListFilter struct {
	ID      []int64  `json:"id"`
	Season  []Season `json:"season"`
	BrandID []int64  `json:"brandId"`
}

type CatalogueOnIssuu struct {
	ID     int64              `json:"id"`
	Season Season             `json:"season"`
	Link   string             `json:"link"`
	Brand  BrandResolveResult `json:"brand"`
}

func (CatalogueOnIssuu) IsCatalogue() {}

type Catalogues struct {
	List  *CatalogueList `json:"list"`
	Total int64          `json:"total"`
}

type Person struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

type Snowboard struct {
	ID       int64              `json:"id"`
	Name     string             `json:"name"`
	FullName string             `json:"fullName"`
	Type     SnowboardType      `json:"type"`
	Season   Season             `json:"season"`
	Brand    BrandResolveResult `json:"brand"`
	Images   []SnowboardImage   `json:"images"`
}

type SnowboardBaseImage struct {
	URL         string `json:"url"`
	ColorOfBase string `json:"colorOfBase"`
}

func (SnowboardBaseImage) IsSnowboardImage() {}

type SnowboardGeneralImage struct {
	URL string `json:"url"`
}

func (SnowboardGeneralImage) IsSnowboardImage() {}

type SnowboardList struct {
	Items []*Snowboard `json:"items"`
}

type SnowboardListFilter struct {
	ID      []int64  `json:"id"`
	Season  []Season `json:"season"`
	BrandID []int64  `json:"brandId"`
}

type SnowboardSizeImage struct {
	URL  string `json:"url"`
	Size string `json:"size"`
}

func (SnowboardSizeImage) IsSnowboardImage() {}

type Snowboards struct {
	List  *SnowboardList `json:"list"`
	Total int64          `json:"total"`
}

type BrandListSort string

const (
	BrandListSortIDAsc    BrandListSort = "ID_ASC"
	BrandListSortIDDesc   BrandListSort = "ID_DESC"
	BrandListSortNameAsc  BrandListSort = "NAME_ASC"
	BrandListSortNameDesc BrandListSort = "NAME_DESC"
)

var AllBrandListSort = []BrandListSort{
	BrandListSortIDAsc,
	BrandListSortIDDesc,
	BrandListSortNameAsc,
	BrandListSortNameDesc,
}

func (e BrandListSort) IsValid() bool {
	switch e {
	case BrandListSortIDAsc, BrandListSortIDDesc, BrandListSortNameAsc, BrandListSortNameDesc:
		return true
	}
	return false
}

func (e BrandListSort) String() string {
	return string(e)
}

func (e *BrandListSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BrandListSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BrandListSort", str)
	}
	return nil
}

func (e BrandListSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CatalogueListSort string

const (
	CatalogueListSortIDAsc      CatalogueListSort = "ID_ASC"
	CatalogueListSortIDDesc     CatalogueListSort = "ID_DESC"
	CatalogueListSortSeasonAsc  CatalogueListSort = "SEASON_ASC"
	CatalogueListSortSeasonDesc CatalogueListSort = "SEASON_DESC"
)

var AllCatalogueListSort = []CatalogueListSort{
	CatalogueListSortIDAsc,
	CatalogueListSortIDDesc,
	CatalogueListSortSeasonAsc,
	CatalogueListSortSeasonDesc,
}

func (e CatalogueListSort) IsValid() bool {
	switch e {
	case CatalogueListSortIDAsc, CatalogueListSortIDDesc, CatalogueListSortSeasonAsc, CatalogueListSortSeasonDesc:
		return true
	}
	return false
}

func (e CatalogueListSort) String() string {
	return string(e)
}

func (e *CatalogueListSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CatalogueListSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CatalogueListSort", str)
	}
	return nil
}

func (e CatalogueListSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Season string

const (
	SeasonW0001 Season = "W0001"
	SeasonW0102 Season = "W0102"
	SeasonW0203 Season = "W0203"
	SeasonW0304 Season = "W0304"
	SeasonW0405 Season = "W0405"
	SeasonW0506 Season = "W0506"
	SeasonW0607 Season = "W0607"
	SeasonW0708 Season = "W0708"
	SeasonW0809 Season = "W0809"
	SeasonW0910 Season = "W0910"
	SeasonW1011 Season = "W1011"
	SeasonW1112 Season = "W1112"
	SeasonW1213 Season = "W1213"
	SeasonW1314 Season = "W1314"
	SeasonW1415 Season = "W1415"
	SeasonW1516 Season = "W1516"
	SeasonW1617 Season = "W1617"
	SeasonW1718 Season = "W1718"
	SeasonW1819 Season = "W1819"
	SeasonW1920 Season = "W1920"
	SeasonW2021 Season = "W2021"
)

var AllSeason = []Season{
	SeasonW0001,
	SeasonW0102,
	SeasonW0203,
	SeasonW0304,
	SeasonW0405,
	SeasonW0506,
	SeasonW0607,
	SeasonW0708,
	SeasonW0809,
	SeasonW0910,
	SeasonW1011,
	SeasonW1112,
	SeasonW1213,
	SeasonW1314,
	SeasonW1415,
	SeasonW1516,
	SeasonW1617,
	SeasonW1718,
	SeasonW1819,
	SeasonW1920,
	SeasonW2021,
}

func (e Season) IsValid() bool {
	switch e {
	case SeasonW0001, SeasonW0102, SeasonW0203, SeasonW0304, SeasonW0405, SeasonW0506, SeasonW0607, SeasonW0708, SeasonW0809, SeasonW0910, SeasonW1011, SeasonW1112, SeasonW1213, SeasonW1314, SeasonW1415, SeasonW1516, SeasonW1617, SeasonW1718, SeasonW1819, SeasonW1920, SeasonW2021:
		return true
	}
	return false
}

func (e Season) String() string {
	return string(e)
}

func (e *Season) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Season(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Season", str)
	}
	return nil
}

func (e Season) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SnowboardListSort string

const (
	SnowboardListSortNameAsc    SnowboardListSort = "NAME_ASC"
	SnowboardListSortNameDesc   SnowboardListSort = "NAME_DESC"
	SnowboardListSortSeasonAsc  SnowboardListSort = "SEASON_ASC"
	SnowboardListSortSeasonDesc SnowboardListSort = "SEASON_DESC"
)

var AllSnowboardListSort = []SnowboardListSort{
	SnowboardListSortNameAsc,
	SnowboardListSortNameDesc,
	SnowboardListSortSeasonAsc,
	SnowboardListSortSeasonDesc,
}

func (e SnowboardListSort) IsValid() bool {
	switch e {
	case SnowboardListSortNameAsc, SnowboardListSortNameDesc, SnowboardListSortSeasonAsc, SnowboardListSortSeasonDesc:
		return true
	}
	return false
}

func (e SnowboardListSort) String() string {
	return string(e)
}

func (e *SnowboardListSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SnowboardListSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SnowboardListSort", str)
	}
	return nil
}

func (e SnowboardListSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SnowboardType string

const (
	SnowboardTypeSnowboard   SnowboardType = "SNOWBOARD"
	SnowboardTypeSplitboard  SnowboardType = "SPLITBOARD"
	SnowboardTypePowsurfer   SnowboardType = "POWSURFER"
	SnowboardTypeSplitsurfer SnowboardType = "SPLITSURFER"
	SnowboardTypeSnowskate   SnowboardType = "SNOWSKATE"
)

var AllSnowboardType = []SnowboardType{
	SnowboardTypeSnowboard,
	SnowboardTypeSplitboard,
	SnowboardTypePowsurfer,
	SnowboardTypeSplitsurfer,
	SnowboardTypeSnowskate,
}

func (e SnowboardType) IsValid() bool {
	switch e {
	case SnowboardTypeSnowboard, SnowboardTypeSplitboard, SnowboardTypePowsurfer, SnowboardTypeSplitsurfer, SnowboardTypeSnowskate:
		return true
	}
	return false
}

func (e SnowboardType) String() string {
	return string(e)
}

func (e *SnowboardType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SnowboardType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SnowboardType", str)
	}
	return nil
}

func (e SnowboardType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
