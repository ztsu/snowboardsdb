// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package client

import (
	"context"

	"github.com/Yamashou/gqlgenc/client"
)

type Client struct {
	Client *client.Client
}
type GetBrands struct {
	Brands *struct {
		Total int64
		List  struct {
			Items []*struct {
				Name        string
				WebsiteURL  string
				OriginsFrom *string
				FoundedIn   *int64
				Founders    []*struct {
					ID   int64
					Name string
				}
			}
		}
	}
}

const GetBrandsQuery = `query GetBrands ($filter: BrandListFilter!) {
	brands {
		total(filter: $filter)
		list(filter: $filter) {
			items {
				name
				websiteUrl
				originsFrom
				foundedIn
				founders {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetBrands(ctx context.Context, filter BrandListFilter, httpRequestOptions ...client.HTTPRequestOption) (*GetBrands, error) {
	vars := map[string]interface{}{
		"filter": filter,
	}

	var res GetBrands
	if err := c.Client.Post(ctx, GetBrandsQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
